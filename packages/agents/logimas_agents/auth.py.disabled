import os
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
import jose.jwt
from jose import JWTError
from pydantic import BaseModel
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

SUPABASE_JWT_SECRET = os.getenv("SUPABASE_JWT_SECRET")
if not SUPABASE_JWT_SECRET:
    raise ValueError("SUPABASE_JWT_SECRET must be set in the .env file.")

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/token")


class User(BaseModel):
    id: str
    role: str


async def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
    )
    try:
        payload = jose.jwt.decode(
            token, SUPABASE_JWT_SECRET, algorithms=["HS256"], audience="authenticated"
        )
        user_id: str = payload.get("sub")
        app_metadata = payload.get("app_metadata", {})
        user_role: str = app_metadata.get("role")

        if user_id is None or user_role is None:
            raise credentials_exception

    except JWTError:
        raise credentials_exception

    return User(id=user_id, role=user_role)


def require_roles(required_roles: list[str]):
    async def role_checker(current_user: User = Depends(get_current_user)):
        if current_user.role not in required_roles:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"Access denied. User role '{current_user.role}' is not in allowed roles: {required_roles}",
            )
        return current_user

    return role_checker
